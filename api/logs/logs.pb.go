// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logs.proto

package logs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogMsg_Type int32

const (
	LogMsg_debug   LogMsg_Type = 0
	LogMsg_info    LogMsg_Type = 1
	LogMsg_warning LogMsg_Type = 2
	LogMsg_error   LogMsg_Type = 3
)

var LogMsg_Type_name = map[int32]string{
	0: "debug",
	1: "info",
	2: "warning",
	3: "error",
}

var LogMsg_Type_value = map[string]int32{
	"debug":   0,
	"info":    1,
	"warning": 2,
	"error":   3,
}

func (x LogMsg_Type) String() string {
	return proto.EnumName(LogMsg_Type_name, int32(x))
}

func (LogMsg_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0, 0}
}

type LogMsg struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Level                string   `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMsg) Reset()         { *m = LogMsg{} }
func (m *LogMsg) String() string { return proto.CompactTextString(m) }
func (*LogMsg) ProtoMessage()    {}
func (*LogMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0}
}
func (m *LogMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMsg.Merge(m, src)
}
func (m *LogMsg) XXX_Size() int {
	return m.Size()
}
func (m *LogMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LogMsg proto.InternalMessageInfo

func (m *LogMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LogMsg) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func init() {
	proto.RegisterEnum("LogMsg_Type", LogMsg_Type_name, LogMsg_Type_value)
	proto.RegisterType((*LogMsg)(nil), "LogMsg")
}

func init() { proto.RegisterFile("logs.proto", fileDescriptor_782e6d65c19305b4) }

var fileDescriptor_782e6d65c19305b4 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0xbf, 0x4a, 0xc4, 0x40,
	0x10, 0xc6, 0xb3, 0x97, 0xfb, 0x93, 0x8c, 0xcd, 0xb2, 0x88, 0x84, 0x53, 0xc2, 0x91, 0xea, 0x1a,
	0xf7, 0xc0, 0xab, 0x6c, 0x45, 0xbb, 0xd8, 0x1c, 0x82, 0x75, 0x82, 0x73, 0x43, 0x20, 0xc9, 0x84,
	0xdd, 0x3d, 0x25, 0xb5, 0x2f, 0xe1, 0x23, 0x59, 0xfa, 0x08, 0x12, 0x5f, 0x44, 0x92, 0x45, 0xec,
	0xe6, 0xfb, 0xe6, 0x57, 0x7c, 0x3f, 0x80, 0x9a, 0xc9, 0xea, 0xce, 0xb0, 0xe3, 0xf5, 0x25, 0x31,
	0x53, 0x8d, 0xbb, 0x29, 0x95, 0xa7, 0xe3, 0x0e, 0x9b, 0xce, 0xf5, 0xfe, 0x99, 0xbd, 0x0b, 0x58,
	0xe6, 0x4c, 0x8f, 0x96, 0xd4, 0x15, 0xc4, 0xae, 0x6a, 0xd0, 0xba, 0xa2, 0xe9, 0x12, 0xb1, 0x11,
	0xdb, 0xf0, 0xf0, 0x5f, 0x28, 0x09, 0x61, 0x63, 0x29, 0x99, 0x6d, 0xc4, 0x36, 0x3e, 0x8c, 0xa7,
	0x3a, 0x87, 0x45, 0x8d, 0xaf, 0x58, 0x27, 0xe1, 0xd4, 0xf9, 0x90, 0xed, 0x61, 0xfe, 0xd4, 0x77,
	0xa8, 0x62, 0x58, 0xbc, 0x60, 0x79, 0x22, 0x19, 0xa8, 0x08, 0xe6, 0x55, 0x7b, 0x64, 0x29, 0xd4,
	0x19, 0xac, 0xde, 0x0a, 0xd3, 0x56, 0x2d, 0xc9, 0xd9, 0x48, 0xa0, 0x31, 0x6c, 0x64, 0x78, 0x73,
	0x0b, 0x51, 0xce, 0x64, 0xef, 0x0b, 0x57, 0xa8, 0x6b, 0x88, 0x9e, 0x4d, 0xe5, 0x30, 0x67, 0x52,
	0x2b, 0xed, 0xb7, 0xad, 0x2f, 0xb4, 0x97, 0xd0, 0x7f, 0x12, 0xfa, 0x61, 0x94, 0xc8, 0x82, 0x3b,
	0xf9, 0x39, 0xa4, 0xe2, 0x6b, 0x48, 0xc5, 0xf7, 0x90, 0x8a, 0x8f, 0x9f, 0x34, 0x28, 0x97, 0x13,
	0xb3, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x9d, 0xee, 0xb8, 0x04, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogsDataClient is the client API for LogsData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogsDataClient interface {
	WriteLog(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type logsDataClient struct {
	cc *grpc.ClientConn
}

func NewLogsDataClient(cc *grpc.ClientConn) LogsDataClient {
	return &logsDataClient{cc}
}

func (c *logsDataClient) WriteLog(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/LogsData/WriteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsDataServer is the server API for LogsData service.
type LogsDataServer interface {
	WriteLog(context.Context, *LogMsg) (*emptypb.Empty, error)
}

// UnimplementedLogsDataServer can be embedded to have forward compatible implementations.
type UnimplementedLogsDataServer struct {
}

func (*UnimplementedLogsDataServer) WriteLog(ctx context.Context, req *LogMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLog not implemented")
}

func RegisterLogsDataServer(s *grpc.Server, srv LogsDataServer) {
	s.RegisterService(&_LogsData_serviceDesc, srv)
}

func _LogsData_WriteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsDataServer).WriteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LogsData/WriteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsDataServer).WriteLog(ctx, req.(*LogMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogsData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LogsData",
	HandlerType: (*LogsDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteLog",
			Handler:    _LogsData_WriteLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}

func (m *LogMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintLogs(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintLogs(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintLogs(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogs(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovLogs(uint64(m.Timestamp))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovLogs(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovLogs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLogs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogs(x uint64) (n int) {
	return sovLogs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogs = fmt.Errorf("proto: unexpected end of group")
)
